

// Name & Version
//PRODUCT_NAME = $(PROJECT_NAME)
// have to override this every time?
PRODUCT_SHORT_NAME = pvvv~
PRODUCT_NAME = lp.$(PRODUCT_SHORT_NAME)

PRODUCT_VERSION = 7
ARCHS = i386 x86_64


// Paths
C74SUPPORT = $(SRCROOT)/../c74support
HEADER_SEARCH_PATHS = "$(C74SUPPORT)/max-includes" "$(C74SUPPORT)/msp-includes" "$(C74SUPPORT)/jit-includes" "$(SRCROOT)/../LitterLib"
FRAMEWORK_SEARCH_PATHS = "$(C74SUPPORT)/max-includes" "$(C74SUPPORT)/msp-includes" "$(C74SUPPORT)/jit-includes"
DSTROOT = $(PROJECT_DIR)
// DSTROOT = $(SRCROOT)/build/$CONFIGURATION/
// (This next path is relative to DSTROOT)
INSTALL_PATH = /../sysbuild/$(CONFIGURATION)/externals


// Special Files
GCC_PREFIX_HEADER = $(C74SUPPORT)/max-includes/macho-prefix.pch
INFOPLIST_FILE = $(SRCROOT)/../Resources/Info.plist
//$(SRCROOT)/../Info.plist


// The following section sets the Mac SDK version to be used.
// For most projects this has little to no impact because there are no direct dependencies on OS function calls.
// In those projects with OS function calls, it should be okay to use the most recent SDK version because the 
// MACOSX_DEPLOYMENT_TARGET will disable functionality that is unavailable in the older target OS.
// For this reason, the SDKROOT variable is commented out, telling Xcode to use the default (which is the most recent SDK).
//
// SDKROOT = macosx10.6

MACOSX_DEPLOYMENT_TARGET = 10.11


// Compiler Version -- leave them all commented out to get the default version provided by Xcode
// GCC_VERSION = com.apple.compilers.llvmgcc42
// GCC_VERSION = com.apple.compilers.llvm.clang.1_0


// Preprocessor Defines
GCC_PREPROCESSOR_DEFINITIONS = "DENORM_WANT_FIX = 1" "NO_TRANSLATION_SUPPORT = 1" __MAX_MSP_OBJECT__ __LITTER_UB__=1 "LITTER_USE_OBEX = 1"


// Static Configuration (don't change these)
WRAPPER_EXTENSION = mxo;
WARNING_CFLAGS = -Wmost -Wno-four-char-constants -Wno-unknown-pragmas
DEPLOYMENT_LOCATION = YES
GENERATE_PKGINFO_FILE = YES


// Flags to enforce some build-time checks for the symbols used while not actually performing a hard link
C74_SYM_LINKER_FLAGS = @$(C74SUPPORT)/max-includes/c74_linker_flags.txt


// hide all symbols by default
// mark a function to be exported with the C74_EXPORT macro
// most likely this will only apply to the ext_main() function which we've already prototyped for you
OTHER_CFLAGS = -fvisibility=hidden

OTHER_LDFLAGS = -framework MaxAudioAPI -framework JitterAPI $(C74_SYM_LINKER_FLAGS)


// Product Bundle Identifier
PRODUCT_BUNDLE_IDENTIFIER = de.castine.$(PRODUCT_NAME)
